using AutoMapper;
using Api_HabeisEducacional.Models;
using Api_HabeisEducacional.DTOs;

namespace Api_HabeisEducacional.Mappings
{
    /// <summary>
    /// Profile principal do AutoMapper para mapeamentos entre Entidades e DTOs
    /// 
    /// BENEF√çCIOS DO AUTOMAPPER:
    /// ‚úÖ Reduz c√≥digo boilerplate (menos linhas)
    /// ‚úÖ Mapeamento autom√°tico por conven√ß√£o de nomes
    /// ‚úÖ Configura√ß√£o centralizada e reutiliz√°vel
    /// ‚úÖ Type-safe mapping (verifica√ß√£o em compile-time)
    /// ‚úÖ Performance otimizada com caching interno
    /// ‚úÖ Facilita manuten√ß√£o e evolu√ß√£o dos DTOs
    /// 
    /// BOAS PR√ÅTICAS APLICADAS:
    /// üîß Configura√ß√£o expl√≠cita para propriedades calculadas
    /// üîß Mapeamento reverso autom√°tico com ReverseMap()
    /// üîß Configura√ß√£o de ignore para propriedades de navega√ß√£o
    /// üîß Mapeamento condicional baseado em nulls
    /// üîß Profile separado para melhor organiza√ß√£o
    /// </summary>
    public class AutoMapperProfile : Profile
    {
        public AutoMapperProfile()
        {
            ConfigurarMapeamentosAluno();
            ConfigurarMapeamentosCurso();
            ConfigurarMapeamentosMatricula();
            ConfigurarMapeamentosCertificado();
        }

        /// <summary>
        /// Configura mapeamentos para a entidade Aluno
        /// 
        /// MELHORIAS IMPLEMENTADAS:
        /// - Mapeamento autom√°tico Aluno ‚Üî AlunoDTO
        /// - AlunoCreateDTO ‚Üí Aluno (ignore propriedades auto-geradas)
        /// - Configura√ß√£o para ignorar cole√ß√µes de navega√ß√£o em DTOs
        /// </summary>
        private void ConfigurarMapeamentosAluno()
        {
            // Mapeamento bidirecional Aluno ‚Üî AlunoDTO
            CreateMap<Aluno, AlunoDTO>()
                .ReverseMap(); // Permite mapeamento nos dois sentidos automaticamente

            // Mapeamento AlunoCreateDTO ‚Üí Aluno (usado na cria√ß√£o)
            CreateMap<AlunoCreateDTO, Aluno>()
                .ForMember(dest => dest.ID, opt => opt.Ignore()) // ID √© auto-gerado
                .ForMember(dest => dest.Data_Cadastro, opt => opt.Ignore()) // Data √© auto-preenchida
                .ForMember(dest => dest.FotoUrl, opt => opt.Ignore()) // FotoUrl n√£o √© fornecida na cria√ß√£o
                .ForMember(dest => dest.Matriculas, opt => opt.Ignore()) // Cole√ß√µes de navega√ß√£o ignoradas
                .ForMember(dest => dest.Certificados, opt => opt.Ignore());

            // Mapeamento AlunoUpdateDTO ‚Üí Aluno (usado na atualiza√ß√£o)
            CreateMap<AlunoUpdateDTO, Aluno>()
                .ForMember(dest => dest.ID, opt => opt.Ignore()) // ID n√£o √© alterado
                .ForMember(dest => dest.Data_Cadastro, opt => opt.Ignore()) // Data de cadastro n√£o muda
                .ForMember(dest => dest.Matriculas, opt => opt.Ignore()) // Cole√ß√µes de navega√ß√£o ignoradas
                .ForMember(dest => dest.Certificados, opt => opt.Ignore());

            /* C√ìDIGO ANTERIOR (convers√£o manual nos servi√ßos):
            // Exemplo do que era feito manualmente:
            var alunoDto = new AlunoDTO
            {
                ID = aluno.ID,
                Nome = aluno.Nome,
                Email = aluno.Email,
                Data_Cadastro = aluno.Data_Cadastro
            };
            
            // AGORA: _mapper.Map<AlunoDTO>(aluno) - Uma linha apenas!
            */
        }

        /// <summary>
        /// Configura mapeamentos para a entidade Curso
        /// 
        /// MELHORIAS IMPLEMENTADAS:
        /// - Mapeamento autom√°tico com todas as propriedades
        /// - Configura√ß√£o para cria√ß√£o sem propriedades auto-geradas
        /// </summary>
        private void ConfigurarMapeamentosCurso()
        {
            // Mapeamento bidirecional Curso ‚Üî CursoDTO
            CreateMap<Curso, CursoDTO>()
                .ReverseMap();

            // Mapeamento CursoCreateDTO ‚Üí Curso (usado na cria√ß√£o)
            CreateMap<CursoCreateDTO, Curso>()
                .ForMember(dest => dest.ID, opt => opt.Ignore()) // ID √© auto-gerado
                .ForMember(dest => dest.Matriculas, opt => opt.Ignore()) // Cole√ß√µes de navega√ß√£o ignoradas
                .ForMember(dest => dest.Certificados, opt => opt.Ignore());

            /* C√ìDIGO ANTERIOR (convers√£o manual):
            var cursoDto = new CursoDTO
            {
                ID = curso.ID,
                Titulo = curso.Titulo,
                Descricao = curso.Descricao,
                Instrutor = curso.Instrutor,
                Preco = curso.Preco,
                Duracao = curso.Duracao
            };
            
            // AGORA: _mapper.Map<CursoDTO>(curso) - Muito mais limpo!
            */
        }

        /// <summary>
        /// Configura mapeamentos para a entidade Matr√≠cula
        /// 
        /// MELHORIAS IMPLEMENTADAS:
        /// - Mapeamento de propriedades calculadas (CursoTitulo, AlunoNome)
        /// - Configura√ß√£o condicional baseada em navega√ß√£o
        /// - Mapeamento apenas para entidade na cria√ß√£o
        /// </summary>
        private void ConfigurarMapeamentosMatricula()
        {
            // Mapeamento Matricula ‚Üí MatriculaDTO (com propriedades calculadas)
            CreateMap<Matricula, MatriculaDTO>()
                .ForMember(dest => dest.CursoTitulo, 
                          opt => opt.MapFrom(src => src.Curso != null ? src.Curso.Titulo : string.Empty))
                .ForMember(dest => dest.AlunoNome, 
                          opt => opt.MapFrom(src => src.Aluno != null ? src.Aluno.Nome : string.Empty));

            // Mapeamento MatriculaCreateDTO ‚Üí Matricula (usado na cria√ß√£o)
            CreateMap<MatriculaCreateDTO, Matricula>()
                .ForMember(dest => dest.ID, opt => opt.Ignore()) // ID √© auto-gerado
                .ForMember(dest => dest.Data_Matricula, opt => opt.Ignore()) // Data √© auto-preenchida
                .ForMember(dest => dest.Status, opt => opt.Ignore()) // Status √© definido como Ativa por padr√£o
                .ForMember(dest => dest.Curso, opt => opt.Ignore()) // Propriedades de navega√ß√£o ignoradas
                .ForMember(dest => dest.Aluno, opt => opt.Ignore());

            /* C√ìDIGO ANTERIOR (convers√£o manual com verifica√ß√µes):
            var matriculaDto = new MatriculaDTO
            {
                ID = matricula.ID,
                Data_Matricula = matricula.Data_Matricula,
                Curso_ID = matricula.Curso_ID,
                Aluno_ID = matricula.Aluno_ID,
                Status = matricula.Status,
                CursoTitulo = matricula.Curso?.Titulo ?? string.Empty,
                AlunoNome = matricula.Aluno?.Nome ?? string.Empty
            };
            
            // AGORA: _mapper.Map<MatriculaDTO>(matricula) - Autom√°tico!
            */
        }

        /// <summary>
        /// Configura mapeamentos para a entidade Certificado
        /// 
        /// MELHORIAS IMPLEMENTADAS:
        /// - Mapeamento de propriedades de navega√ß√£o
        /// - Configura√ß√£o para ignorar c√≥digo de valida√ß√£o na cria√ß√£o
        /// - Mapeamento otimizado para DTOs de consulta
        /// </summary>
        private void ConfigurarMapeamentosCertificado()
        {
            // Mapeamento Certificado ‚Üí CertificadoDTO (com propriedades calculadas)
            CreateMap<Certificado, CertificadoDTO>()
                .ForMember(dest => dest.CursoTitulo, 
                          opt => opt.MapFrom(src => src.Curso != null ? src.Curso.Titulo : string.Empty))
                .ForMember(dest => dest.AlunoNome, 
                          opt => opt.MapFrom(src => src.Aluno != null ? src.Aluno.Nome : string.Empty));

            // Mapeamento CertificadoCreateDTO ‚Üí Certificado (usado na cria√ß√£o)
            CreateMap<CertificadoCreateDTO, Certificado>()
                .ForMember(dest => dest.ID, opt => opt.Ignore()) // ID √© auto-gerado
                .ForMember(dest => dest.Data_Emissao, opt => opt.Ignore()) // Data √© auto-preenchida
                .ForMember(dest => dest.Codigo_Validacao, opt => opt.Ignore()) // C√≥digo √© gerado no servi√ßo
                .ForMember(dest => dest.Curso, opt => opt.Ignore()) // Propriedades de navega√ß√£o ignoradas
                .ForMember(dest => dest.Aluno, opt => opt.Ignore());

            // Mapeamento CertificadoUpdateDTO ‚Üí Certificado (usado na atualiza√ß√£o)
            CreateMap<CertificadoUpdateDTO, Certificado>()
                .ForMember(dest => dest.ID, opt => opt.Ignore()) // ID n√£o √© alterado
                .ForMember(dest => dest.Data_Emissao, opt => opt.Ignore()) // Data de emiss√£o n√£o muda
                .ForMember(dest => dest.Codigo_Validacao, opt => opt.Ignore()) // C√≥digo n√£o muda
                .ForMember(dest => dest.Curso_ID, opt => opt.Ignore()) // IDs de relacionamento n√£o mudam
                .ForMember(dest => dest.Aluno_ID, opt => opt.Ignore())
                .ForMember(dest => dest.Curso, opt => opt.Ignore()) // Propriedades de navega√ß√£o ignoradas
                .ForMember(dest => dest.Aluno, opt => opt.Ignore());

            /* C√ìDIGO ANTERIOR (convers√£o manual complexa):
            var certificadoDto = new CertificadoDTO
            {
                ID = certificado.ID,
                Data_Emissao = certificado.Data_Emissao,
                Curso_ID = certificado.Curso_ID,
                Aluno_ID = certificado.Aluno_ID,
                Codigo_Validacao = certificado.Codigo_Validacao,
                CursoTitulo = certificado.Curso?.Titulo ?? "Curso n√£o encontrado",
                AlunoNome = certificado.Aluno?.Nome ?? "Aluno n√£o encontrado"
            };
            
            // AGORA: _mapper.Map<CertificadoDTO>(certificado) - Simples e eficiente!
            */
        }
    }
}

/* 
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üìã DOCUMENTA√á√ÉO DO AUTOMAPPER PROFILE
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üéØ OBJETIVO:
   Centralizar todas as configura√ß√µes de mapeamento entre entidades e DTOs,
   reduzindo c√≥digo boilerplate e melhorando a manutenibilidade.

‚ö° BENEF√çCIOS DE PERFORMANCE:
   - Mapeamentos compilados e cacheados internamente
   - Reflection otimizada para propriedades
   - Reutiliza√ß√£o de configura√ß√µes em toda aplica√ß√£o
   - Menos alloca√ß√µes de objetos intermedi√°rios

üîß CONFIGURA√á√ïES APLICADAS:
   - ReverseMap(): Permite mapeamento bidirecional autom√°tico
   - ForMember(): Configura√ß√£o espec√≠fica para propriedades complexas
   - Ignore(): Ignora propriedades que n√£o devem ser mapeadas
   - MapFrom(): Define fonte customizada para propriedades calculadas

üìä PADR√ïES DE USO:
   - CreateDTO ‚Üí Entity: Para cria√ß√£o (ignora propriedades auto-geradas)
   - Entity ‚Üí DTO: Para consultas (inclui propriedades calculadas)
   - DTO ‚Üí Entity: Para atualiza√ß√µes (mapeia apenas campos edit√°veis)

üõ°Ô∏è SEGURAN√áA:
   - Propriedades sens√≠veis (IDs, Senhas) s√£o tratadas adequadamente
   - Valida√ß√£o impl√≠cita atrav√©s de tipos fortemente tipados
   - Preven√ß√£o de over-posting atrav√©s de DTOs espec√≠ficos

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
*/ 