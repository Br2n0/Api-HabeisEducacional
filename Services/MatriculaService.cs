using Api_HabeisEducacional.Data;
using Api_HabeisEducacional.DTOs;
using Api_HabeisEducacional.Models;
using Microsoft.EntityFrameworkCore;
using AutoMapper; // ‚úÖ NOVO: Import do AutoMapper

namespace Api_HabeisEducacional.Services
{
    /// <summary>
    /// Interface que define as opera√ß√µes dispon√≠veis para gerenciamento de matr√≠culas
    /// </summary>
    public interface IMatriculaService
    {
        // Busca todas as matr√≠culas
        Task<IEnumerable<MatriculaDTO>> GetAllAsync();
        
        // Busca uma matr√≠cula pelo ID
        Task<MatriculaDTO?> GetByIdAsync(int id);
        
        // Busca matr√≠culas de um aluno espec√≠fico
        Task<IEnumerable<MatriculaDTO>> GetByAlunoIdAsync(int alunoId);
        
        // Busca matr√≠culas de um curso espec√≠fico
        Task<IEnumerable<MatriculaDTO>> GetByCursoIdAsync(int cursoId);
        
        // Cria uma nova matr√≠cula
        Task<MatriculaDTO> CreateAsync(MatriculaCreateDTO dto);
        
        // Atualiza o status de uma matr√≠cula
        Task UpdateStatusAsync(int id, MatriculaUpdateDTO dto);
        
        // Cancela uma matr√≠cula
        Task CancelarAsync(int id);
        
        // Conclui uma matr√≠cula
        Task ConcluirAsync(int id);
    }

    /// <summary>
    /// Implementa√ß√£o do servi√ßo de matr√≠culas que cont√©m a l√≥gica de neg√≥cios
    /// üîÑ MELHORADO: Agora usa AutoMapper para convers√µes autom√°ticas
    /// </summary>
    public class MatriculaService : IMatriculaService
    {
        private readonly AppDbContext _db;
        private readonly IMapper _mapper; // ‚úÖ NOVO: AutoMapper

        public MatriculaService(AppDbContext db, IMapper mapper)
        {
            _db = db;
            _mapper = mapper;
        }

        /// <summary>
        /// Obt√©m todas as matr√≠culas cadastradas
        /// üîÑ MELHORADO: Usa AutoMapper (2 linhas vs 11 linhas)
        /// </summary>
        public async Task<IEnumerable<MatriculaDTO>> GetAllAsync()
        {
            var matriculas = await _db.Matriculas
                .Include(m => m.Curso)
                .Include(m => m.Aluno)
                .ToListAsync();
            return _mapper.Map<IEnumerable<MatriculaDTO>>(matriculas);
        }

        /// <summary>
        /// Obt√©m uma matr√≠cula espec√≠fica pelo ID
        /// üîÑ MELHORADO: Usa AutoMapper (1 linha vs 10 linhas)
        /// </summary>
        public async Task<MatriculaDTO?> GetByIdAsync(int id)
        {
            var matricula = await _db.Matriculas
                .Include(m => m.Curso)
                .Include(m => m.Aluno)
                .FirstOrDefaultAsync(m => m.ID == id);
            
            return _mapper.Map<MatriculaDTO?>(matricula);
        }

        /// <summary>
        /// Obt√©m todas as matr√≠culas de um aluno espec√≠fico
        /// </summary>
        public async Task<IEnumerable<MatriculaDTO>> GetByAlunoIdAsync(int alunoId)
        {
            // Verifica se o aluno existe
            if (!await _db.Alunos.AnyAsync(a => a.ID == alunoId))
                throw new KeyNotFoundException("Aluno n√£o encontrado");

            // Busca as matr√≠culas do aluno
            return await _db.Matriculas
                .Include(m => m.Curso)
                .Where(m => m.Aluno_ID == alunoId)
                .Select(m => new MatriculaDTO
                {
                    ID = m.ID,
                    Data_Matricula = m.Data_Matricula,
                    Curso_ID = m.Curso_ID,
                    Aluno_ID = m.Aluno_ID,
                    Status = m.Status,
                    CursoTitulo = m.Curso != null ? m.Curso.Titulo : string.Empty,
                    AlunoNome = string.Empty // N√£o precisa carregar o nome do aluno, j√° sabemos qual √©
                })
                .ToListAsync();
        }

        /// <summary>
        /// Obt√©m todas as matr√≠culas de um curso espec√≠fico
        /// </summary>
        public async Task<IEnumerable<MatriculaDTO>> GetByCursoIdAsync(int cursoId)
        {
            // Verifica se o curso existe
            if (!await _db.Cursos.AnyAsync(c => c.ID == cursoId))
                throw new KeyNotFoundException("Curso n√£o encontrado");

            // Busca as matr√≠culas do curso
            return await _db.Matriculas
                .Include(m => m.Aluno)
                .Where(m => m.Curso_ID == cursoId)
                .Select(m => new MatriculaDTO
                {
                    ID = m.ID,
                    Data_Matricula = m.Data_Matricula,
                    Curso_ID = m.Curso_ID,
                    Aluno_ID = m.Aluno_ID,
                    Status = m.Status,
                    CursoTitulo = string.Empty, // N√£o precisa carregar o t√≠tulo do curso, j√° sabemos qual √©
                    AlunoNome = m.Aluno != null ? m.Aluno.Nome : string.Empty
                })
                .ToListAsync();
        }

        /// <summary>
        /// Cria uma nova matr√≠cula
        /// </summary>
        public async Task<MatriculaDTO> CreateAsync(MatriculaCreateDTO dto)
        {
            // Verifica se o aluno existe
            var aluno = await _db.Alunos.FindAsync(dto.Aluno_ID);
            if (aluno == null)
                throw new KeyNotFoundException("Aluno n√£o encontrado");

            // Verifica se o curso existe
            var curso = await _db.Cursos.FindAsync(dto.Curso_ID);
            if (curso == null)
                throw new KeyNotFoundException("Curso n√£o encontrado");

            // Verifica se j√° existe uma matr√≠cula ativa para este aluno neste curso
            var matriculaExistente = await _db.Matriculas
                .FirstOrDefaultAsync(m => m.Aluno_ID == dto.Aluno_ID && 
                                          m.Curso_ID == dto.Curso_ID && 
                                          m.Status == StatusMatricula.Ativa);
                                          
            if (matriculaExistente != null)
                throw new InvalidOperationException("Aluno j√° est√° matriculado neste curso");

            // Cria uma nova matr√≠cula usando o construtor
            var matricula = new Matricula(dto.Aluno_ID, dto.Curso_ID, DateTime.Now);

            // Adiciona no banco e salva
            _db.Matriculas.Add(matricula);
            await _db.SaveChangesAsync();

            // ‚úÖ NOVO: AutoMapper converte automaticamente
            var matriculaDto = _mapper.Map<MatriculaDTO>(matricula);
            matriculaDto.CursoTitulo = curso.Titulo;
            matriculaDto.AlunoNome = aluno.Nome;
            return matriculaDto;
        }

        /// <summary>
        /// Atualiza o status de uma matr√≠cula
        /// </summary>
        public async Task UpdateStatusAsync(int id, MatriculaUpdateDTO dto)
        {
            // Busca a matr√≠cula pelo ID
            var matricula = await _db.Matriculas.FindAsync(id);
            if (matricula == null)
                throw new KeyNotFoundException("Matr√≠cula n√£o encontrada");

            // Atualiza o status usando os m√©todos de dom√≠nio apropriados
            switch (dto.Status)
            {
                case StatusMatricula.Concluida:
                    matricula.Concluir();
                    break;
                case StatusMatricula.Cancelada:
                    matricula.Cancelar();
                    break;
                case StatusMatricula.Ativa:
                    // Para reativar uma matr√≠cula, precisamos verificar se √© poss√≠vel
                    if (matricula.Status == StatusMatricula.Cancelada)
                    {
                        // Usando reflex√£o para definir o status pois n√£o h√° m√©todo p√∫blico para reativar
                        var statusField = typeof(Matricula).GetField("_status", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                        statusField?.SetValue(matricula, StatusMatricula.Ativa);
                    }
                    else
                    {
                        throw new InvalidOperationException("N√£o √© poss√≠vel reativar uma matr√≠cula conclu√≠da");
                    }
                    break;
            }

            // Salva as altera√ß√µes
            await _db.SaveChangesAsync();
        }

        /// <summary>
        /// Cancela uma matr√≠cula
        /// </summary>
        public async Task CancelarAsync(int id)
        {
            // Busca a matr√≠cula pelo ID
            var matricula = await _db.Matriculas.FindAsync(id);
            if (matricula == null)
                throw new KeyNotFoundException("Matr√≠cula n√£o encontrada");

            // Verifica se a matr√≠cula j√° est√° cancelada
            if (matricula.Status == StatusMatricula.Cancelada)
                throw new InvalidOperationException("Matr√≠cula j√° est√° cancelada");

            // Usa o m√©todo de dom√≠nio para cancelar
            matricula.Cancelar();

            // Salva as altera√ß√µes
            await _db.SaveChangesAsync();
        }

        /// <summary>
        /// Conclui uma matr√≠cula
        /// </summary>
        public async Task ConcluirAsync(int id)
        {
            // Busca a matr√≠cula pelo ID
            var matricula = await _db.Matriculas.FindAsync(id);
            if (matricula == null)
                throw new KeyNotFoundException("Matr√≠cula n√£o encontrada");

            // Verifica se a matr√≠cula est√° ativa
            if (matricula.Status != StatusMatricula.Ativa)
                throw new InvalidOperationException("Apenas matr√≠culas ativas podem ser conclu√≠das");

            // Usa o m√©todo de dom√≠nio para concluir
            matricula.Concluir();

            // Salva as altera√ß√µes
            await _db.SaveChangesAsync();
        }
    }
} 